import React from 'react'
import PropTypes from 'prop-types'
import clsx from 'clsx'
import CheckCircleIcon from '@mui/icons-material/CheckCircle'
import ErrorIcon from '@mui/icons-material/Error'
import InfoIcon from '@mui/icons-material/Info'
import CloseIcon from '@mui/icons-material/Close'
import {amber, green} from '@mui/material/colors'
import IconButton from '@mui/material/IconButton'
import Snackbar from '@mui/material/Snackbar'
import SnackbarContent from '@mui/material/SnackbarContent'
import WarningIcon from '@mui/icons-material/Warning'
import {makeStyles} from '@mui/material/styles'

const variantIcon = {
    success: CheckCircleIcon,
    warning: WarningIcon,
    error: ErrorIcon,
    info: InfoIcon,
}

const useStyles = makeStyles(theme => ({
    success: {
        backgroundColor: green[600],
    },
    error: {
        backgroundColor: theme.palette.error.dark,
    },
    info: {
        backgroundColor: theme.palette.primary.main,
    },
    warning: {
        backgroundColor: amber[700],
    },
    icon: {
        fontSize: 20,
    },
    iconVariant: {
        opacity: 0.9,
        marginRight: theme.spacing(1),
    },
    message: {
        display: 'flex',
        alignItems: 'center',
    },
}))

function MySnackbarContentWrapper(props: {
    [x: string]: any
    message: string
    onClose: any
    variant: 'success' | 'warning' | 'error' | 'info'
}) {
    const classes = useStyles()
    const {className, message, onClose, variant, ...other} = props
    const Icon = variantIcon[variant]

    return (
        <SnackbarContent
            className={clsx(classes[variant], className)}
            aria-describedby="client-snackbar"
            message={
                <span id="client-snackbar" className={classes.message}>
          <Icon className={clsx(classes.icon, classes.iconVariant)}/>
                    {message}
        </span>
            }
            action={[
                <IconButton key="close" aria-label="close" color="inherit" onClick={onClose}>
                    <CloseIcon className={classes.icon}/>
                </IconButton>,
            ]}
            {...other}
        />
    )
}

MySnackbarContentWrapper.propTypes = {
    className: PropTypes.string,
    message: PropTypes.string,
    onClose: PropTypes.func,
    variant: PropTypes.oneOf(['error', 'info', 'success', 'warning']).isRequired,
}

function renderSwitch(type: '' | 'success' | 'error' | 'warning' | 'info', message: string) {
    const [open, setOpen] = React.useState(true)

    const handleClose = (event: any, reason: string) => {
        if (reason === 'clickaway') {
            return
        }
        setOpen(false)
    }

    switch (type) {
        case 'success':
            return (
                <Snackbar
                    anchorOrigin={{
                        vertical: 'bottom',
                        horizontal: 'left',
                    }}
                    open={open}
                    autoHideDuration={4000}
                    onClose={handleClose}>
                    <MySnackbarContentWrapper onClose={handleClose} variant="success" message={message}/>
                </Snackbar>
            )

        case 'error':
            return (
                <Snackbar
                    anchorOrigin={{
                        vertical: 'bottom',
                        horizontal: 'left',
                    }}
                    open={open}
                    onClose={handleClose}>
                    <MySnackbarContentWrapper onClose={handleClose} variant="error" message={message}/>
                </Snackbar>
            )

        case 'warning':
            return (
                <Snackbar
                    anchorOrigin={{
                        vertical: 'bottom',
                        horizontal: 'left',
                    }}
                    open={open}
                    onClose={handleClose}>
                    <MySnackbarContentWrapper onClose={handleClose} variant="warning" message={message}/>
                </Snackbar>
            )

        case 'info':
            return (
                <Snackbar
                    anchorOrigin={{
                        vertical: 'bottom',
                        horizontal: 'left',
                    }}
                    open={open}
                    onClose={handleClose}>
                    <MySnackbarContentWrapper onClose={handleClose} variant="info" message={message}/>
                </Snackbar>
            )
        default:
            return ''
    }
}

export default function Snackbars(props: { type: any; message: any }): any {
    const {type, message} = props

    return renderSwitch(type, message)
}
